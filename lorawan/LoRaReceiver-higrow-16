/* com 16 for 2.0 board com 18 for 1.0 board seperate antenna
 * \Arduino\LORAWAN\TTGO-LoRa-Series-master\LoRaReceiver\LoRaReceiver-higrow-16 to use with
 * \Arduino\LORAWAN\TTGO-LoRa-Series-master\LoRaSender\LoRaSender-higrow-10.7
 * for (ESP32 Dev Module):LilyGO TTGO T3 LoRa32 868MHz V2.1.6 ESP32
 * reads text records from lorasenders higrow
 */

//#define SND_MSG                // SET! confirmation message
//#define SND_MSGX               // SET! extra confirmation message
//#define DEBUG                  // SET! dump incoming string to screen or just their values
//#define RST_ESP                // SET! restart ESP every 60 min to avoid hanging(set value interval below)
//#define CHK_XTRA               // SET! check first byte of message is yours
#define OLDLORA                  // SET! when using 1.0 board io. 2.14
#define CHK_LORA                 // SET! check if lora.receive still active
#define CHK_RSSI                 // SET! display last RSSI and SNR
#define CHK_HEAP                 // SET! check memory heap
//#define USE_INSIDE             // SET! reduce radiosignal when testing
#define USE_WIFI                 // SET! use WIFI to get timestamp
#define USE_EEPR                 // SET! store la  st read values in eeprom
#define USE_BLYNK                // SET! use of Blynk dashboard
#define USE_SYNCW                // SET! use syncword to avoid stay messages (set in sender sketch too)
#define NrSensors 2              // SET!

#ifdef  USE_BLYNK
  #define BLYNK_PRINT Serial
  #define BLYNK_TEMPLATE_ID "TMPL3538963K"                      // SET!
  #define BLYNK_DEVICE_NAME "mysecretgarden                     // SET!
  #define BLYNK_AUTH_TOKEN  "T367v69vb867j945g06760w4j6049867"  // SET!
  #include <BlynkSimpleEsp32.h>
  bool flip;                     // for heartbeat led blynk
  char auth[] = BLYNK_AUTH_TOKEN;
  BlynkTimer timer;
  WidgetLED led1(V9);
  WidgetLED led2(V14);
  WidgetLED led3(V15);
  WidgetLED led4(V16);
  #if !defined USE_WIFI
    #define    USE_WIFI
  #endif
#endif

#ifdef  RST_ESP
  long interval       = 3600000; // SET! interval 60 minutes to restart ESP every 60 min to avoid hanging
  long previousMillis =  millis  ();
#endif

#ifdef  CHK_LORA
  long interval2       =  450000; // SET! interval 7.5 minutes to check lora(band) to avoid hanging
  long previousMillis2 =  millis  ();
#endif

#ifdef  CHK_RSSI
  int snr;
  int rsi;
  int snrv [NrSensors]={0,0};
  int rsiv [NrSensors]={0,0};
#endif

#ifdef  CHK_HEAP
  #define HEAP_DIF  10000        // SET! reset when memory loss > HEAP_DIF
  bool chkheap      = true;      // SET! restart ESP when mem heap smaller than ...
#else
  bool chkheap      = false;     // SET! restart ESP when mem heap smaller than ...
#endif

#ifdef  OLDLORA
  #include "lora1.0_board_def.h" // for 1.0  board with seperate antenna
#else  
  #include "lora2.0_board_def.h" // for 2.14 board with onboard  antenna
#endif

#ifdef  USE_WIFI
  #include <ArduinoJson.h>
  #include <NTPClient.h>
  #include <WiFi.h>
  #include <WiFiUdp.h>
  #include <WiFiClient.h>
  #include "gewoon_secrets.h"                   //or use 2 lines below
  //#define WIFI_SSID       "yourWIFISSID"      // ssid
  //#define WIFI_PASSWORD   "yourWIFIPassword"  // password
  //RTC
  StaticJsonDocument<1000> doc;
  WiFiUDP   ntpUDP;                // Define NTP Client to get time
  NTPClient timeClient(ntpUDP);    // Variables to save date and time
#endif

#include <SPI.h>
#include <LoRa.h>

#ifdef USE_EEPR
  #include "EEPROM.h"
  String EepSave [NrSensors]={"11:11MYDATA01113500200020","11:11MYDATA01113500200020"};//25 long
#endif

String Sensors [NrSensors]={"S99 99% 999 errors.","S99 99% 999 errors."}; //20 long
String SensMes [NrSensors]={"?????","?????"};   //5 long
String SensTim [NrSensors]={"wait!","wait!"};   //5 long
int    NrMsgs  [NrSensors]={0,0};
int    Humi    [NrSensors]={99,99};
int    Temp    [NrSensors]={0,0};//temp or errorcounter
int    count    = 0;              // total nr of correct received packages
int    expLEN   = 20;             // SET! length of "MYDATA01102500100000"
int    flop     = 0;              // for heartbeat oled
int    mytimer = 0;
String ID       = "MYDATA";       // SET! your chosen identifier
String expID    = ID;         
// choose your own coding/decoding strings but use same strings as in sender program
String normal   = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890+-";//SET! decode
String coded    = "1234567890abcdefghijklmnopqrstuvwxyz-+";//SET! code (pa A becomes 1)
String msgin    = "MYDATA01102509900000";
String msgout   = msgin;
String recv     = msgin;
String subst    = "X";
String LoRaStat = "*";
String myMessage=msgin;
String sentence=msgin;
String SN="99";                   // sensor number
String DN="9";                    // destination number
String TT="999";                  // temp reading(3)
String HH=TT;                     // hum reading (3)
String MN="99999";                // messagenumber (5)
int    T;                         // temp   reading  as integer
int    H;                         // hum    reading  as integer
int    S;                         // sensor  number as integer
int    M;                         // message number as integer
int    Threshold  = 20;
bool   water      = true;
long   freememstart;  
String formattedDate="2018-05-28T16:12:34Z";
String TimeStamp="99:99";

String STHours;
String STMinutes;
int    TMinutes;
int    PrevMins[NrSensors]={0,0};

//OLED
OLED_CLASS_OBJ display(OLED_ADDRESS, OLED_SDA, OLED_SCL);

#ifdef  USE_BLYNK
  // This function will be called every time Slider Widget
  // in Blynk app writes values to the Virtual Pin V1
  BLYNK_WRITE(V19)
  {
  int pinValue = param.asInt(); // assigning incoming value from pin V19 to a variable
  // process received value
  Threshold = pinValue;
  Blynk.virtualWrite  (V2,Threshold);
  }

  // This function is called every time the device is connected to the Blynk.Cloud
  BLYNK_CONNECTED()
  {
      Blynk.virtualWrite  (V3 ,"Verbonden met Blynk");
      Blynk.virtualWrite  (V2, Threshold);
      Serial.println      ("Blynk_Connect");
      led1.off  ();
      led2.off  ();
      led3.off  ();
      led4.on   ();
  }
  // This function sends ESP32 uptime every 10 seconds (see timer.setInterval) to some virtual Pins
  void myTimerEvent()
  {   
    String msg;
    int gemhum =(Humi[0]+ Humi[1])/2;
    if (gemhum<=Threshold){water=true;led1.on();msg="tuin sproeien!";} else {water=false;led1.off();msg="nat genoeg buiten";}
    if (flip){led4.on();}else{led4.off();}flip=!flip; 
    Blynk.virtualWrite  (V3,  msg);
    Blynk.virtualWrite  (V8,  gemhum);
    Blynk.virtualWrite  (V2,  Threshold);
    Blynk.virtualWrite  (V5,  Humi   [1]);
    Blynk.virtualWrite  (V4,  Humi   [0]);
  }
#endif
      
// ########################### setup ###########################
void setup()
{
    Serial.begin               (115200);
    while                      (!Serial);
    delay                      (1000);  
    Serial.println             (__FILE__);
    Serial.println             ("Config setup:");
    #ifdef DEBUG            
      Serial.println           ("## debug mode set ##");         
    #endif
    #ifdef OLDLORA             
      Serial.println           ("-LoRa board v1.0");            
    #else                      
      Serial.println           ("-LoRa board v2.1");            
    #endif
    #ifdef CHK_XTRA            
      Serial.println           ("-send extra message");         
    #endif
    #ifdef CHK_RSSI            
      Serial.println           ("-check signal strength");      
    #endif
    #ifdef CHK_HEAP            
      Serial.println           ("-check memory heap");          
    #endif
    #ifdef USE_INSIDE          
      Serial.println           ("-reduce radiosignal");         
    #endif
    #ifdef USE_WIFI            
      Serial.println           ("-use WIFI for rtc or Blynk");           
    #endif
    #ifdef  USE_BLYNK
      Serial.println           ("-use Blynk");           
    #endif
    #ifdef USE_EEPR            
      Serial.println           ("-use Eeprom to store values"); 
    #endif
    #ifdef  RST_ESP
      Serial.print             ("-restarting ESP for stability every "); 
      Serial.print             (interval/60000) ;Serial.println(" minutes");
    #endif
    #ifdef  CHK_LORA
      Serial.print             ("-checking lora.receive for stability every "); 
      Serial.println           (interval2/60000);Serial.println(" minutes");
    #endif

    if (OLED_RST > 0) {
        pinMode                (OLED_RST, OUTPUT);
        digitalWrite           (OLED_RST, HIGH);
        delay                  (100);
        digitalWrite           (OLED_RST, LOW);
        delay                  (100);
        digitalWrite           (OLED_RST, HIGH);
    }
    display.init               ();
    display.flipScreenVertically();
    display.clear              ();
    display.setFont            (ArialMT_Plain_16);
    display.setTextAlignment   (TEXT_ALIGN_CENTER);
    display.drawString         (display.getWidth() / 2, display.getHeight() / 2, LORA_SENDER ? "LoRa Sender" : "LoRa Receiver");
    display.display();
    
    #ifdef  USE_WIFI
      WiFi.begin               (ssid,password);
      if (WiFi.waitForConnectResult() != WL_CONNECTED) {
        display.clear          ();
        Serial.println         ("WiFi Connect Fail");
        display.drawString     (display.getWidth() / 2, display.getHeight() / 2, "WiFi Connect Fail");
        display.display        ();
        delay                  (2000);
        esp_restart();
      }
      Serial.print             ("Connected : ");
      Serial.println           (WiFi.SSID());
      Serial.print             ("IP:");
      Serial.println           (WiFi.localIP().toString());
      display.clear            ();
      display.drawString       (display.getWidth() / 2, display.getHeight() / 2, "IP:" + WiFi.localIP().toString());
      display.display          ();
    #endif
    
    SPI.begin                  (CONFIG_CLK, CONFIG_MISO, CONFIG_MOSI, CONFIG_NSS);
    LoRa.setPins               (CONFIG_NSS, CONFIG_RST, CONFIG_DIO0);

    if (!LoRa.begin(BAND)){
        Serial.println         ("Starting LoRa failed!");
        while (1);
    }
    Serial.println             ("LoRa initialised!");

    #ifdef USE_INSIDE
      LoRa.setTxPower(3);      // txPower - TX power in dB, defaults to 17
    #else                      // Supported values are 2 to 20
      LoRa.setTxPower(8);
    #endif
    
    #ifdef USE_SYNCW
      //##5 Change sync word (0xF3) to match the receiver
      // The sync word assures you don't get LoRa messages from other LoRa transceivers
      // ranges from 0-0xFF
      LoRa.setSyncWord        (0xBA);//SET! if used
    #endif

    display.clear             ();
    display.drawString        (display.getWidth() / 2, display.getHeight() / 2, "LoraRecv Ready");
    display.display           ();
    display.setTextAlignment  (TEXT_ALIGN_LEFT);

    #ifdef  USE_WIFI
      //RTC Initialize a NTPClient to get time
      timeClient.begin        (); 
      timeClient.setTimeOffset(7200);  // NOT DST 3600
      while                   (!timeClient.update()) {timeClient.forceUpdate();}
    #endif
    
    #ifdef USE_EEPR
      ReadFromEeprom          ();
    #endif
    
    LoRa.receive              ();
    freememstart=esp_get_free_heap_size();
    Serial.print              ("##>esp_get_free_heap_size():");  
    Serial.println            (freememstart);  


#ifdef  USE_BLYNK
  Blynk.begin(auth, ssid, password, "blynk.cloud", 80);
  // Setup a function to be called every second
  // timer.setInterval(1000L, myTimerEvent);
     timer.setInterval(10000L, myTimerEvent);// every 10 seconds
  // timer.setInterval(30000L, myTimerEvent);// every 30 seconds
  // timer.setInterval(60000L, myTimerEvent);// every minute
#endif 
}

// ########################### LOOP  ###########################

void loop(){
  unsigned long currentMillis = millis(); 
  flop++;                     //display heartbeat on oled
  if (flop>25000){            // 2.5 secs
    flop=0;
    if (LoRaStat=="+"){LoRaStat="x";} else {LoRaStat="+";}
    displayOled();

    #ifdef  USE_BLYNK
    mytimer++;
    if (mytimer==20){          // prox 1 min set leds and blynk values
        mytimer=0;
        SetLeds();
      }      
    #endif 
  }
  
  #ifdef  USE_BLYNK
    Blynk.run();
    timer.run();
  #endif
  
  #ifdef  CHK_LORA
    if   (currentMillis - previousMillis2 > interval2) {
        if (!LoRa.begin(BAND)){
          Serial.println      ("Checking LoRa failed! Restarting ...");
          delay               (500);      
          ESP.restart         ();    
        }    
        Serial.println        ("LoRa OK, resetting looptimer");
        LoRaStat        =     "+";
        previousMillis2 =     currentMillis;
    }
  #endif

  #ifdef  RST_ESP
    if   (currentMillis - previousMillis > interval) { 
      Serial.println        ("restarting ESP after interval.");
      #ifdef USE_EEPR
        WriteToEeprom       ();
      #endif
      delay                 (500);      
      ESP.restart           ();
    }
  #endif

  int packetSize = LoRa.parsePacket();
  if (packetSize) {  
      recv = "";
//    while (LoRa.available()) {recv += (char)LoRa.read();} ## replace
      while (LoRa.available()) {recv  = LoRa.readString();}

      #ifdef  CHK_RSSI
        snr= LoRa.packetSnr ();
        rsi= LoRa.packetRssi();
        Serial.print        ("RSSI/SNR:");      
        Serial.print        (rsi); 
        Serial.print        ("/"); 
        Serial.println      (snr); 
      #endif
      
      int lenIN   =       recv.length();      // length of "MYDATA01100200100047"
      Serial.print        ("received package long ");      
      Serial.println      (lenIN); 

      if                  (lenIN==expLEN){
        #ifdef CHK_XTRA
          //XTRA CHK 2 PREVENT HANGING ESP
          String CHK = recv.substring(0,1); //"c"
          int p = coded.indexOf     (CHK);  //12
          subst = normal.substring  (p,p+1);//"M"
          #ifdef DEBUG
              Serial.print      (CHK);   
              Serial.print      (p);   
              Serial.println    (subst);           
          #endif
          if (expID.substring(0,1)!=subst){ID="X";} // extra check: 1st character of message is as expected
        #endif 
                 
        if (ID!="X"){
          codit      (recv,false);        // now convert coded msgin to msgout
          recv    =   msgout;
          ID      =   recv.substring(0,6);// "MYDATA"          
          count++;
        }
          
        if (ID==expID){
          //"MYDATA01102509900000"
          breakdown(recv);                // get vars out of message

          // now send conformation message
          // identifier send to sender 0? from receiver 1 = me received OK
          // myMessage ="MYDATA0?1OK";
        
          myMessage =expID;               //"MYDATA"
          myMessage+=SN;                  // 01 or 02
          myMessage+=DN;                  // former destination = 1 = me
          myMessage+="OK";                // "MYDATA011OK"         
          codit(myMessage,true);          // convert msgin to coded msgout
          myMessage=msgout;

          #ifdef SND_MSG
            Serial.print        ("sending  :");   
            Serial.println      (myMessage);  
            LoRa.beginPacket    ();
            LoRa.print          (myMessage);
            LoRa.endPacket      ();
            //2testlater        LoRa.endPacket(true); // true = async / non-blocking mode
            //https://www.rfwireless-world.com/Terminology/What-is-difference-between-Implicit-header-and-Explicit-header-in-LoRaWAN-packet.html
          #else
            Serial.println      ("Not sending confirmation message.");
          #endif

          #ifdef USE_WIFI
            formattedDate   =   timeClient.getFormattedDate();
            int pos         =   formattedDate.indexOf("T");
            TimeStamp       =   formattedDate.substring(pos+1, formattedDate.length()-1-3);
          #else
            TimeStamp       =   "99:99";
            delay (250);
          #endif

          S = SN.toInt();      
          ParseReadings(S,true);          // store data in arrays and update counter                      
          LoRaStat = "R";
          
          #ifdef DEBUG
            displayDebug();
          #else
            displayOled();          
          #endif

          #ifdef SND_MSGX     //SEND AGAIN 2 BE SURE        
            delay             (1000); 
            Serial.print      ("sending  :");   
            Serial.println    (myMessage);  
            LoRa.beginPacket  ();
            LoRa.print        (myMessage);
            LoRa.endPacket    ();
          #else
            delay (50);
          #endif

          #ifdef DEBUG
            displayDebug();
          #else
            displayOled();          
          #endif

          #ifdef USE_EEPR
            WriteToEeprom       ();         // update eeprom values for reset or restart
          #endif

          #ifdef  USE_BLYNK
              GetMinutes       (TimeStamp);
              PrevMins [S-1] = TMinutes;             
              M=SensMes[S-1].toInt();
              if (S==1){
                led2.off();
                Blynk.virtualWrite(V0 ,SensTim[0]);
                Blynk.virtualWrite(V4 ,Humi   [0]);
                Blynk.virtualWrite(V6 ,SensMes[0]);
                Blynk.virtualWrite(V10,Temp   [0]);
                Blynk.virtualWrite(V12,String(M/12));                                 //hours running 12ph
              } else {
                led3.off();
                Blynk.virtualWrite(V1 ,SensTim[1]);
                Blynk.virtualWrite(V5 ,Humi   [1]);
                Blynk.virtualWrite(V7 ,SensMes[1]);
                Blynk.virtualWrite(V11,Temp   [1]);
                Blynk.virtualWrite(V13,String(M/24));                                 //days  running 245pd
              }
          #endif

          #ifdef SND_MSG
            delay(1000);LoRa.receive();                                               // after sending start receiving again
          #else
            Serial.println("Package is not mine ... wrong ID ignoring package");
            LoRaStat="I";
            displayOled();                                                            // end of some packet same length
          #endif 
         
      } // expected ID 
    } // end of len = expexted len
    else   {Serial.println("Package is not mine ... wrong length ignoring package");} // end of some packet
    
    #ifdef CHK_HEAP //##4
      Serial.print    ("###>ESP.getFreeHeap():");
      Serial.print    (ESP.getFreeHeap());
      Serial.print    (" esp_get_free_heap_size():");  
      Serial.print    (esp_get_free_heap_size());
      Serial.print    (" DIFF:");
      int freeheap = esp_get_free_heap_size()-freememstart;
      Serial.println  (freeheap);
      if              (freeheap<-HEAP_DIF){
        LoRaStat  =   "H";
        displayOled   ();   
        if            (chkheap){
          Serial.println          ("restarting ESP because free memory is getting low.");
          delay                   (1000);      
          ESP.restart             ();   
        }
      } // end of small heapsize
      #endif
    }  // end of parsepacket
}      // end of loop

// ########################### VOIDS ###########################

void codit(String secretmessage, bool mydir){ // mydir true => encrypt false => decrypt message
  msgout="";
  Serial.print      ("secret   :");
  Serial.println    (secretmessage);
  for (int i = 0; i < secretmessage.length(); i++) {
      String x      = secretmessage.substring(i,i+1);
      if (mydir){
        int y = normal.indexOf   (x);
        if (y>normal.length()){subst="*";Serial.print("not found char:");Serial.println(x);}
        else {subst = coded.substring   (y,y+1);}            
      } else {
        int y = coded.indexOf    (x);
        if (y>coded.length()) {subst="*";Serial.print("not found char:");Serial.println(x);}
        else {subst = normal.substring (y,y+1);}
      }
      msgout += subst;
  }
  Serial.print      ("converted:");
  Serial.println    (msgout);
  if (secretmessage.length()!=msgout.length()){
    Serial.println  ("Error: output string wrong length!");
    msgout =        secretmessage;
  }
}

#ifdef USE_EEPR
  void WriteToEeprom (){
      EEPROM.begin      (64); 
      //11:11MYDATA0111350020002012:12MYDATA02113500200020" sample format of message
      sentence        = SensTim[0]+EepSave[0]+SensTim[1]+EepSave[1];
      if (sentence.length()>64){ // error in message do not overwrite eeprom 2 be sure not 2 hangup esp
          sentence="12:129999999999999999999912:1299999999999999999999";
      }
      EEPROM.writeString(0, sentence);
      Serial.print      ("Written to eeprom:");
      Serial.print      (sentence);
      Serial.print      (" long:");
      Serial.println    (sentence.length());
      EEPROM.commit     ();
  } 
  void ReadFromEeprom   (){
      EEPROM.begin      (64); 
      sentence = EEPROM.readString (0);
      Serial.print      ("Read from eeprom:");
      Serial.print      (sentence);
      Serial.print      (" long:");
      Serial.println    (sentence.length());
      //11:11MYDATA0111350020002012:12MYDATA02113500200020"
      SensTim [0] =     sentence.substring(0    ,5      );// "11:11"
      SensTim [1] =     sentence.substring(0+25 ,0+25+5 );// "12:12"
      EepSave [0] =     sentence.substring(5    ,5+20   );// "MYDATA01113500200020"
      EepSave [1] =     sentence.substring(5+25 ,5+25+20);// "MYDATA02113500200020"
      Serial.println    ("Interpreting latest packages read from eeprom ...");       
      breakdown         (EepSave[0]);
      TimeStamp   =     SensTim [0];
      GetMinutes        (TimeStamp);
      PrevMins[0]=      TMinutes;
      ParseReadings     (1,true);
      breakdown         (EepSave[1]);
      TimeStamp   =     SensTim [1];
      GetMinutes        (TimeStamp);
      PrevMins[1] =     TMinutes;
      ParseReadings     (2,true);
      displayOled       ();
      #ifdef  USE_BLYNK
        SetLeds         ();
      #endif
  }
#endif

void breakdown(String input){
  ID  = input.substring(0 , 6);   //"MYDATA"
  SN  = input.substring(6 , 8);   //"01";     sensor number
  DN  = input.substring(8 , 9);   //"1";      destination number
  TT  = input.substring(9 ,12);   //"025";    temp reading(3)
  HH  = input.substring(12,15);   //"099";    hum reading (3)
  MN  = input.substring(15,20);   //"01234";  messagenumber
  T   = TT.toInt();               //25 
  TT  = String(T);
  H   = HH.toInt();               //99
  HH  = String(H);
  S   = SN.toInt();               //1       
  M   = MN.toInt();               //1234  
  Serial.print        ("total received packages:");
  Serial.print        (count);
  Serial.print        (" this one is ");
  Serial.print        (M);
  Serial.print        (" from sensor ");
  Serial.print        (S);
  Serial.print        (" message->");
  Serial.print        (input);
  Serial.println      ("<- end of message"); 
  #ifdef DEBUG
    Serial.print      ("ID:");
    Serial.println    (ID);
    Serial.print      ("SN:");
    Serial.println    (SN);
    Serial.print      ("DN:"); 
    Serial.println    (DN);
    Serial.print      ("TT:");
    Serial.println    (TT);
    Serial.print      ("HH:");
    Serial.println    (HH);
    Serial.print      ("MN:");
    Serial.println    (MN);
  #endif
}

void ParseReadings(int tsensor,bool updmsg){// sensor nr 1 or 2 stored in aray[0] or array[1]
//   Sensors[tsensor-1]  = "S"+SN+" "+HH+"%"+" "+TT+" errors";
     Sensors[tsensor-1]  = "S"+SN+" "+HH+"%";
     SensMes[tsensor-1]  = MN;
     if (updmsg){
        SensTim [tsensor-1] = TimeStamp;
        EepSave [tsensor-1] = recv;
        rsiv    [tsensor-1] = rsi;
        snrv    [tsensor-1] = snr;
        Humi    [tsensor-1] = H;
        Temp    [tsensor-1] = T;
        NrMsgs  [tsensor-1]++;
     }
}

#ifdef DEBUG
  void displayDebug(){                    // just dump received string on display
       display.clear();
       String  PART1  = recv.substring(0,10);
       String  PART2  = recv.substring(10,20);
       display.drawString  (0 ,0, "Incoming data");
       display.drawString  (0 ,16, PART1);
       display.drawString  (0 ,32, PART2);
       display.drawString  (0 ,48, "from S");
       display.drawString  (48,48, SN);
       display.display();
  }
#endif

void displayOled(){
     display.clear();
     display.drawString   (0    ,0, SensTim [0]);               // timestamp of latest message
     display.drawString   (64   ,0, SensTim [1]);
     display.drawString   (48   ,0, LoRaStat);
     display.drawString   (0    ,16,Sensors [0]);               // formatted string with data sensor1
     display.drawString   (0    ,32,Sensors [1]);

     #ifdef  CHK_RSSI
       display.drawString (64   ,16,String(snrv [0]));
       display.drawString (80   ,16,String(rsiv [0]));
       display.drawString (64   ,32,String(snrv [1]));
       display.drawString (80   ,32,String(rsiv [1]));
     #endif

     if (LoRaStat=="x"){
      display.drawString  (0    ,48,SensMes [0]);               // nr of sent messages according to sender(sensor)
      display.drawString  (64   ,48,SensMes [1]); 
     } else {
      display.drawString  (0    ,48,String(Temp[0]));           // sensor temp or nr errors
      display.drawString  (64   ,48,String(Temp[1]));  
     }                          
     display.display      ();
}

void GetMinutes(String Stamp){
  STHours            =  Stamp.substring(0,2);                   //"12:38"
  STMinutes          =  Stamp.substring(3,5);
  int Thours         =  STHours.toInt  ();
  int Tmins          =  STMinutes.toInt();
  TMinutes           =  (Thours*60)+Tmins;
}

#ifdef  USE_BLYNK
void SetLeds(){
     formattedDate   =  timeClient.getFormattedDate();
     int pos         =  formattedDate.indexOf("T");
     TimeStamp       =  formattedDate.substring(pos+1, formattedDate.length()-1-3);
     GetMinutes         (TimeStamp);
     int T1=TMinutes-PrevMins[0]; 
     if (T1>5 ){led2.on();} else {led2.off();} //if update longer than 5 minutes ago
     int T2=TMinutes-PrevMins[1]; 
     if (T2>60){led3.on();}                    //if update longer than 60 minutes ago          
     //#ifdef DEBUG
     Serial.print       ("sensor values:");
     Serial.print       (Humi[0]); 
     Serial.print       ("/");
     Serial.print       (Humi[1]);
     Serial.print       (" T1:");
     Serial.print       (T1);
     Serial.print       (" T2:");
     Serial.println     (T2);
     //endif
     Blynk.virtualWrite (V0 ,SensTim[0]);
     Blynk.virtualWrite (V1 ,SensTim[1]);
     Blynk.virtualWrite (V4 ,Humi   [0]);
     Blynk.virtualWrite (V5 ,Humi   [1]);
     Blynk.virtualWrite (V6 ,SensMes[0]);
     Blynk.virtualWrite (V7 ,SensMes[1]);
     Blynk.virtualWrite (V10,Temp   [0]);
     Blynk.virtualWrite (V11,Temp   [1]);
     Blynk.virtualWrite (V12,String((SensMes[0].toInt()+Temp[0])/24)); 
     Blynk.virtualWrite (V13,String((SensMes[1].toInt()+Temp[1])/24));  
     Blynk.virtualWrite (V17,T1);
     Blynk.virtualWrite (V18,T2);
}      
#endif 
